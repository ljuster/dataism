scripts:

  build:
    bs: bsb -clean-world -make-world
    prod:
      default:
        description: Build client and server bundles for production env.
        script: concurrently --prefix "[{name}]" --names "CLIENT_BUNDLES,SERVER_BUNDLE" "nps build.prod.client" "nps build.prod.server"
      watch:
        description: Build client and server bundles for production env (watch mode enabled).
        script: concurrently --kill-others --prefix "[{name}]" -c "bgBlue.bold,bgMagenta.bold,bgGreen.bold" --names "CLIENT_BUNDLES,SERVER_BUNDLE" "nps build.prod.client.watch" "nps build.prod.server.watch"
      client:
        default:
          description: Build client bundles for production env.
          script: nps clear.prod.clientBundles && NODE_ENV=production webpack --env=prod --config webpack.config.babel.js
        watch:
          description: Build client bundles for production env (watch mode enabled).
          script: nps "build.prod.client --watch"
      server:
        default:
          description: Build server bundle for production env.
          script: NODE_ENV=production webpack --env=serverBundleProd --config webpack.config.babel.js
        watch:
          description: Build server bundle for production env (watch mode enabled).
          script: nps "build.prod.server --watch"
    dev:
      default:
        description: Build client and server bundles for dev env.
        script: nps build.bs && concurrently --prefix "[{name}]" --names "CLIENT_BUNDLES,SERVER_BUNDLE" "nps build.dev.client" "nps build.dev.server"
      watch:
        description: Build client and server bundles for dev env (watch mode enabled).
        script: nps build.bs && concurrently --kill-others -c "bgBlue.bold,bgMagenta.bold,bgGreen.bold" --prefix "[{name}]" --names "CLIENT_BUNDLES,SERVER_BUNDLE" "nps build.dev.client.watch" "nps build.dev.server.watch"
      client:
        default:
          description: Build client bundles for dev env.
          script: nps clear.dev.clientBundles && NODE_ENV=dev webpack --env=dev --config webpack.config.babel.js
        watch:
          description: Build client bundles for dev env (watch mode enabled).
          script: nps "build.dev.client --watch"
      server:
        default:
          description: Build server bundle for dev env.
          script: NODE_ENV=dev webpack --env=serverBundleDev --config webpack.config.babel.js
        watch:
          description: Build server bundle for dev env (watch mode enabled).
          script: nps "build.dev.server --watch"
    rspec:
      default:
        description: Build client and server bundles for RSpec tests.
        script: nps build.bs && concurrently --prefix "[{name}]" --names "CLIENT_BUNDLES,SERVER_BUNDLE" "nps build.rspec.client" "nps build.rspec.server"
      watch:
        description: Build client and server bundles for RSpec tests (watch mode enabled).
        script: nps build.bs && concurrently --kill-others --prefix "[{name}]" --names "CLIENT_BUNDLES,SERVER_BUNDLE" "nps build.rspec.client.watch" "nps build.rspec.server.watch"
      client:
        default:
          description: Build client bundles for RSpec env.
          script: nps clear.rspec.clientBundles && NODE_ENV=test webpack --env=rspec --config webpack.config.babel.js
        watch:
          description: Build client bundles for RSpec env (watch mode enabled).
          script: nps "build.rspec.client --watch"
      server:
        default:
          description: Build server bundle for RSpec env.
          script: NODE_ENV=test webpack --env=serverBundleRspec --config webpack.config.babel.js
        watch:
          description: Build server bundle for RSpec env (watch mode enabled).
          script: nps "build.rspec.server --watch"

  lint:
    description: Run all linters (eslint, flow)
    script: concurrently --prefix "[{name}]" --names "ESLINT,FLOW" -c "blue,yellow,magenta,orange" "nps eslint" "nps flow.quiet" "nps scsslint"

  test:
    default:
      description: Run Jest test suite.
      script: NODE_ENV=test TZ='UTC' jest
    watch:
      default:
        description: Run Jest test suite in watch mode.
        script: nps "test --watch"
      noCache:
        description: Run Jest test suite in watch mode without using the transform cache (useful for troubleshooting strange errors).
        script: nps "test --watch --no-cache"
    up:
      description: Run Jest test suite and update all snapshots.
      script: nps "test -u"
    noCache:
      description: Run Jest without using the transform cache (useful for troubleshooting strange errors).
      script: nps "test --no-cache"

  validate:
    default:
      description: Concurrently run all linters and tests.
      script: |
        concurrently --prefix "[{name}]" \
                     --names "ESLINT,FLOW,JEST,PRETTIER" \
                     -c "blue,yellow,red,magenta,orange" \
                     "nps eslint" "nps flow.quiet" "nps test" "nps format.listDifferent" "nps scsslint"
    withFormat:
      description: Concurrently run all linters and tests after formatting.
      script: nps format && nps validate
    extreme:
      description: Perform update without cache, check install, and run linters and tests.
      script: nps up.noCache && yarn check && nps flow.up && nps validate

  storybook:
    default: nps storybook.js
    js: start-storybook -p 6006 -c .storybook
    re: nps build.bs && start-storybook -p 6006 -c app/reason/.storybook

  up:
    default:
      description: Wipe node_modules and reinstall dependencies.
      script: trash node_modules && yarn install
    noCache:
      description: Wipe node_modules and reinstall dependencies without cache.
      script: trash node_modules && yarn cache clean && yarn install

  clear:
    bs: bsb -clean-world
    prod:
      default:
        description: Clear all webpack bundles and assets from `public/webpack/production`
        script: trash ../public/webpack/production/*
      clientBundles:
        description: Clear webpack client bundles from `public/webpack/production`
        script: trash ../public/webpack/production/* !../public/webpack/production/server-bundle.js
      serverBundle:
        description: Clear webpack server bundle from `public/webpack/production`
        script: trash ../public/webpack/production/server-bundle.js
    dev:
      default:
        description: Clear all webpack bundles and assets from `public/webpack/dev`
        script: trash ../public/webpack/dev/*
      bundles:
        description: Clear webpack bundles from `public/webpack/dev`
        script: nps clear.dev.clientBundles && nps clear.dev.serverBundle
      clientBundles:
        description: Clear webpack client bundles from `public/webpack/dev`
        script: trash ../public/webpack/dev/* !../public/webpack/dev/server-bundle.js
      serverBundle:
        description: Clear webpack server bundle from `public/webpack/dev`
        script: trash ../public/webpack/dev/server-bundle.js
    rspec:
      default:
        description: Clear all webpack bundles and assets from `public/webpack/test`
        script: trash ../public/webpack/test/*
      clientBundles:
        description: Clear webpack client bundles from `public/webpack/test`
        script: trash ../public/webpack/test/* !../public/webpack/test/server-bundle.js
      serverBundle:
        description: Clear webpack server bundle from `public/webpack/test`
        script: trash ../public/webpack/test/server-bundle.js

  eslint:
    default:
      description: Run eslint.
      script: eslint . --ext ".js,.jsx"
    fix:
      description: Run eslint and auto-fix.
      script: nps "eslint --fix"
    debug:
      description: Run eslint in debug mode.
      script: DEBUG=eslint:cli-engine nps eslint

  scsslint:
    default:
      description: Run scss-lint (runs on all Sass and CSS files, including ones located in Rails folders)
      script: cd .. && bundle exec scss-lint

  format:
    default:
      description: Format files using prettier.
      script: concurrently --prefix "[{name}]" --names "js,css,json" -c "yellow,magenta,green" "nps format.js" "nps format.css" "nps format.json"
    listDifferent:
      description: Check that all files were formatted using prettier.
      script: |
        concurrently \
          --prefix "[{name}]" \
          --names "js,css,json" \
          -c "yellow,magenta,green" \
          "nps format.js.listDifferent" \
          "nps format.css.listDifferent" \
          "nps format.json.listDifferent"
    re: node_modules/bs-platform/lib/refmt.exe --in-place **/*.{re,rei}
    js:
      default:
        description: Run prettier-eslint on JS.
        script: prettier "app/**/*.@(js|jsx)" "webpack.config.babel.js" "webpack/**/*.js" --write
      listDifferent:
        description: Check if any JS files would change by running prettier-eslint.
        script: prettier "app/**/*.@(js|jsx)" "webpack.config.babel.js" "webpack/**/*.js" --list-different
    css:
      default:
        description: Run prettier on Sass and CSS files.
        script: prettier "app/**/*.@(css|scss)" --write
      listDifferent:
        description: Check if any Sass/CSS files would change by running prettier-eslint.
        script: prettier "app/**/*.@(css|scss)" --list-different
    json:
      default:
        description: Run prettier on JSON files.
        script: prettier "app/**/*.json" "../spec/**/*.json" --write
      listDifferent:
        description: Check if any JSON files would change by running prettier-eslint.
        script: prettier "app/**/*.json" "../spec/**/*.json" --list-different

  flow:
    default:
      description: Run Facebook flow static analysis.
      script: flow
    all:
      description: Run Facebook flow static analysis and show all errrors (does not limit to 50).
      script: nps "flow --show-all-errors"
    up:
      description: Use flow-typed to update third-party type definitions.
      script: flow-typed update
    quiet:
      description: Run Facebook flow static analysis without startup messages.
      script: nps "flow --quiet"

  analyzer:
    default:
      description: Run webpack bundle analyzer server.
      script: nps clear.prod && nps analyzer.run
    run:
      description: Generate webpack stats and run bundle analyzer server.
      script: NODE_ENV=production webpack --json --env=prod --config webpack.config.babel.js > ../public/webpack/production/stats.json && webpack-bundle-analyzer -h 0.0.0.0 -p 8888 -s gzip -O ../public/webpack/production/stats.json

  precommit:
    description: Run "validate" if the user has chosen to opt-in to the pre-commit hook using opt-cli.
    script: opt --in pre-commit --exec "yarn start validate"

  prepush:
    description: Run "validate" if the user has chosen to opt-in to the pre-push hook using opt-cli.
    script: opt --in pre-push --exec "yarn start validate"
